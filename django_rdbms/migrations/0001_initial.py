# Generated by Django 5.1.3 on 2024-11-20 17:39

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="IntakeForm",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("data", models.JSONField()),
                ("last_updated_timestamp", models.DateTimeField()),
                ("created_timestamp", models.DateTimeField()),
                ("form_version", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "intake_forms",
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("category", models.CharField(max_length=100)),
                ("value", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "labels",
            },
        ),
        migrations.CreateModel(
            name="LegalMatterKind",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("category", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("intake_form", models.CharField(max_length=100)),
                ("name", models.CharField(max_length=255)),
                (
                    "products",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        db_default="{}",
                        default=list,
                        size=None,
                    ),
                ),
            ],
            options={
                "db_table": "legal_matter_kinds",
            },
        ),
        migrations.CreateModel(
            name="USCity",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("city", models.CharField(max_length=100)),
                ("state_name", models.CharField(max_length=100)),
                ("city_lower", models.CharField(max_length=100)),
                ("county_name", models.CharField(max_length=100)),
                ("state_code", models.CharField(max_length=2)),
            ],
            options={
                "db_table": "us_cities",
            },
        ),
        migrations.CreateModel(
            name="USCounty",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("county_fips", models.CharField(max_length=5, unique=True)),
                ("state_name", models.CharField(max_length=100)),
                ("county_name", models.CharField(max_length=100)),
                ("state_code", models.CharField(max_length=2)),
            ],
            options={
                "db_table": "us_counties",
            },
        ),
        migrations.CreateModel(
            name="USState",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("state_name", models.CharField(max_length=100, unique=True)),
                ("state_code", models.CharField(max_length=2, unique=True)),
            ],
            options={
                "db_table": "us_states",
            },
        ),
        migrations.CreateModel(
            name="Firm",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("state_name", models.CharField(max_length=100)),
                ("state_code", models.CharField(max_length=2)),
                ("email", models.CharField(max_length=255, unique=True)),
                ("address", models.CharField(max_length=255)),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
            ],
            options={
                "db_table": "firms",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                        ),
                        name="firms_acl_get_idx",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                        ),
                        name="firms_acl_list_idx",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                        ),
                        name="firms_acl_roles_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FirmUser",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("last_name", models.CharField(max_length=255)),
                ("email", models.CharField(max_length=255, unique=True)),
                ("last_updated_timestamp", models.DateTimeField()),
                (
                    "number_of_assigning_legal_matters",
                    models.IntegerField(db_default=0),
                ),
                ("number_of_assigned_legal_matters", models.IntegerField(db_default=0)),
                (
                    "roles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, size=None
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("first_name", models.CharField(max_length=255)),
                ("_type", models.CharField(max_length=50)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "firm_ref",
                    models.ForeignKey(
                        db_column="firm_ref",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.firm",
                    ),
                ),
            ],
            options={
                "db_table": "firm_users",
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("label", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "roles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, size=None
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
            ],
            options={
                "db_table": "groups",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                        ),
                        name="groups_acl_get_idx",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                        ),
                        name="groups_acl_list_idx",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                        ),
                        name="groups_acl_roles_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FirmUserGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "firm_user_ref",
                    models.ForeignKey(
                        db_column="firm_user_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "group_ref",
                    models.ForeignKey(
                        db_column="group_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.group",
                    ),
                ),
            ],
            options={
                "db_table": "firm_user_groups",
            },
        ),
        migrations.CreateModel(
            name="FirmGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "firm_ref",
                    models.ForeignKey(
                        db_column="firm_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.firm",
                    ),
                ),
                (
                    "group_ref",
                    models.ForeignKey(
                        db_column="group_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.group",
                    ),
                ),
            ],
            options={
                "db_table": "firm_groups",
            },
        ),
        migrations.CreateModel(
            name="Invite",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("user_type", models.CharField(max_length=50)),
                ("status", models.CharField(max_length=50)),
                ("created_timestamp", models.DateTimeField()),
                ("last_updated_timestamp", models.DateTimeField()),
                ("email", models.CharField(max_length=255)),
                ("expires_at", models.DateTimeField()),
                ("user_name", models.CharField(max_length=255)),
                (
                    "firm_groups",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, size=None
                    ),
                ),
                ("withdrawn_timestamp", models.DateTimeField(blank=True, null=True)),
                ("withdrawn_reason", models.TextField(blank=True, null=True)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "firm_admin_ref",
                    models.ForeignKey(
                        db_column="firm_admin_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invites_as_admin",
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "firm_ref",
                    models.ForeignKey(
                        db_column="firm_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.firm",
                    ),
                ),
                (
                    "firm_user_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="firm_user_ref",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="invites_as_user",
                        to="django_rdbms.firmuser",
                    ),
                ),
            ],
            options={
                "db_table": "invites",
            },
        ),
        migrations.CreateModel(
            name="FirmUserLabel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "firm_user_ref",
                    models.ForeignKey(
                        db_column="firm_user_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "label_ref",
                    models.ForeignKey(
                        db_column="label_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.label",
                    ),
                ),
            ],
            options={
                "db_table": "firm_user_labels",
            },
        ),
        migrations.CreateModel(
            name="LegalMatter",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("created_timestamp", models.DateTimeField()),
                ("status", models.CharField(max_length=50)),
                ("assigned_timestamp", models.DateTimeField(blank=True, null=True)),
                ("accepted_timestamp", models.DateTimeField(blank=True, null=True)),
                ("referral_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "referral_accepted_timestamp",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "referral_rejected_timestamp",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("closed_timestamp", models.DateTimeField(blank=True, null=True)),
                ("canceled_timestamp", models.DateTimeField(blank=True, null=True)),
                ("withdrawn_timestamp", models.DateTimeField(blank=True, null=True)),
                ("rejection_reason", models.TextField(blank=True, null=True)),
                ("withdraw_reason", models.TextField(blank=True, null=True)),
                ("referral_rejected_reason", models.TextField(blank=True, null=True)),
                ("rating", models.IntegerField(db_default=0)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "assigned_lawyer_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="assigned_lawyer_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "kind_ref",
                    models.ForeignKey(
                        db_column="kind_ref",
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.legalmatterkind",
                    ),
                ),
            ],
            options={
                "db_table": "legal_matters",
            },
        ),
        migrations.CreateModel(
            name="CalendarEvent",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("status", models.CharField(max_length=50)),
                ("last_updated_timestamp", models.DateTimeField()),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("description", models.TextField(blank=True, null=True)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "legal_matter_ref",
                    models.ForeignKey(
                        db_column="legal_matter_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.legalmatter",
                    ),
                ),
            ],
            options={
                "db_table": "calendar_events",
            },
        ),
        migrations.CreateModel(
            name="LegalMatterAudit",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_timestamp", models.DateTimeField()),
                ("details", models.TextField()),
                (
                    "legal_matter_ref",
                    models.ForeignKey(
                        db_column="legal_matter_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.legalmatter",
                    ),
                ),
            ],
            options={
                "db_table": "legal_matter_audit",
            },
        ),
        migrations.CreateModel(
            name="LegalMatterIntakeData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "intake_form_ref",
                    models.ForeignKey(
                        db_column="intake_form_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.intakeform",
                    ),
                ),
                (
                    "legal_matter_ref",
                    models.ForeignKey(
                        db_column="legal_matter_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.legalmatter",
                    ),
                ),
            ],
            options={
                "db_table": "legal_matter_intake_data",
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("note", models.TextField()),
                ("created_timestamp", models.DateTimeField()),
                ("last_updated_timestamp", models.DateTimeField()),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "created_by_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="created_by_ref",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notes_created_by",
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "legal_matter_ref",
                    models.ForeignKey(
                        db_column="legal_matter_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.legalmatter",
                    ),
                ),
                (
                    "updated_by_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="updated_by_ref",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="notes_updated_by",
                        to="django_rdbms.firmuser",
                    ),
                ),
            ],
            options={
                "db_table": "notes",
            },
        ),
        migrations.CreateModel(
            name="PaymentProcessorAccount",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("email", models.CharField(max_length=255)),
                ("created", models.DateTimeField()),
                ("details_submitted", models.BooleanField()),
                ("type", models.CharField(max_length=50)),
                ("capabilities_card_payments", models.CharField(max_length=50)),
                ("capabilities_transfers", models.CharField(max_length=50)),
                (
                    "requirements_errors",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        db_default="{}",
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "requirements_pending_verification",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        db_default="{}",
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "requirements_current_deadline",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "requirements_disabled_reason",
                    models.TextField(blank=True, null=True),
                ),
                ("payouts_enabled", models.BooleanField()),
                ("charges_enabled", models.BooleanField()),
                ("_type", models.CharField(max_length=50)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "firm_ref",
                    models.ForeignKey(
                        db_column="firm_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.firm",
                    ),
                ),
            ],
            options={
                "db_table": "payment_processor_accounts",
            },
        ),
        migrations.CreateModel(
            name="Subscriber",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("last_name", models.CharField(max_length=255)),
                ("gender", models.CharField(blank=True, max_length=50, null=True)),
                ("last_updated_timestamp", models.DateTimeField()),
                ("email", models.CharField(max_length=255, unique=True)),
                ("subscription_active", models.BooleanField()),
                (
                    "roles",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), blank=True, size=None
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("first_name", models.CharField(max_length=255)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
            ],
            options={
                "db_table": "subscribers",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                        ),
                        name="subscribers_acl_get_idx",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                        ),
                        name="subscribers_acl_list_idx",
                    ),
                    django.contrib.postgres.indexes.GinIndex(
                        django.contrib.postgres.indexes.OpClass(
                            models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                        ),
                        name="subscribers_acl_roles_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="legalmatter",
            name="subscriber_ref",
            field=models.ForeignKey(
                db_column="subscriber_ref",
                on_delete=django.db.models.deletion.RESTRICT,
                to="django_rdbms.subscriber",
            ),
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("created_timestamp", models.DateTimeField()),
                ("updated_timestamp", models.DateTimeField()),
                ("md5_hash", models.CharField(max_length=32)),
                ("size", models.IntegerField()),
                ("full_path", models.TextField()),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "created_by_firm_user_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="created_by_firm_user_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="documents_created_by_firm_user",
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "legal_matter_ref",
                    models.ForeignKey(
                        db_column="legal_matter_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.legalmatter",
                    ),
                ),
                (
                    "created_by_subscriber_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="created_by_subscriber_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="documents_created_by_subscriber",
                        to="django_rdbms.subscriber",
                    ),
                ),
            ],
            options={
                "db_table": "documents",
            },
        ),
        migrations.CreateModel(
            name="CheckoutSession",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("expires_at", models.DateTimeField()),
                ("created", models.DateTimeField()),
                (
                    "amount_subtotal",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("amount_total", models.DecimalField(decimal_places=2, max_digits=10)),
                ("url", models.TextField()),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "subscriber_ref",
                    models.ForeignKey(
                        db_column="subscriber_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.subscriber",
                    ),
                ),
            ],
            options={
                "db_table": "checkout_sessions",
            },
        ),
        migrations.CreateModel(
            name="CalendarEventParticipant",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "calendar_event_ref",
                    models.ForeignKey(
                        db_column="calendar_event_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.calendarevent",
                    ),
                ),
                (
                    "participant_firm_user_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="participant_firm_user_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "participant_subscriber_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="participant_subscriber_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.subscriber",
                    ),
                ),
            ],
            options={
                "db_table": "calendar_event_participants",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionDetail",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("last_invoice_id", models.CharField(max_length=100)),
                ("last_invoice_status", models.CharField(max_length=50)),
                ("billing_cycle_anchor", models.DateTimeField()),
                ("last_event_timestamp", models.DateTimeField()),
                ("last_event_id", models.CharField(max_length=100)),
                ("subscription_status", models.CharField(max_length=50)),
                ("customer_id", models.CharField(max_length=100)),
                ("current_period_end", models.DateTimeField()),
                ("_type", models.CharField(max_length=50)),
                ("subscription_id", models.CharField(max_length=100, unique=True)),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "subscriber_ref",
                    models.ForeignKey(
                        db_column="subscriber_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.subscriber",
                    ),
                ),
            ],
            options={
                "db_table": "subscription_details",
            },
        ),
        migrations.CreateModel(
            name="SubscriptionProduct",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=255)),
                ("kind", models.CharField(max_length=20)),
                ("price_id", models.CharField(max_length=255)),
                ("price_lookup_key", models.TextField(blank=True, null=True)),
                (
                    "price_recurring_interval",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                ("price_unit_amount", models.IntegerField()),
                (
                    "subscription_detail_ref",
                    models.ForeignKey(
                        db_column="subscription_detail_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.subscriptiondetail",
                    ),
                ),
            ],
            options={
                "db_table": "subscription_products",
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.CharField(max_length=26, primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
                ("created_timestamp", models.DateTimeField()),
                ("last_updated_timestamp", models.DateTimeField()),
                ("completed_timestamp", models.DateTimeField(blank=True, null=True)),
                ("tracked_minutes", models.IntegerField(db_default=0)),
                ("status", models.CharField(max_length=50)),
                ("assigned_timestamp", models.DateTimeField()),
                ("description", models.TextField(blank=True, null=True)),
                ("charge_type", models.CharField(blank=True, max_length=20, null=True)),
                ("charge_reason", models.TextField(blank=True, null=True)),
                (
                    "charge_amount",
                    models.DecimalField(db_default=0, decimal_places=2, max_digits=10),
                ),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "assigned_to_firm_user_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="assigned_to_firm_user_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="tasks_assigned_to_firm_user",
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "assigned_to_subscriber_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="assigned_to_subscriber_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="tasks_assigned_to_subscriber",
                        to="django_rdbms.subscriber",
                    ),
                ),
                (
                    "created_by_ref",
                    models.ForeignKey(
                        db_column="created_by_ref",
                        on_delete=django.db.models.deletion.RESTRICT,
                        related_name="tasks_created_by",
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "legal_matter_ref",
                    models.ForeignKey(
                        db_column="legal_matter_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.legalmatter",
                    ),
                ),
            ],
            options={
                "db_table": "tasks",
            },
        ),
        migrations.CreateModel(
            name="TaskDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "document_ref",
                    models.ForeignKey(
                        db_column="document_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.document",
                    ),
                ),
                (
                    "task_ref",
                    models.ForeignKey(
                        db_column="task_ref",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="django_rdbms.task",
                    ),
                ),
            ],
            options={
                "db_table": "task_documents",
            },
        ),
        migrations.CreateModel(
            name="UserMessage",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "labels",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        db_default="{}",
                        default=list,
                        size=None,
                    ),
                ),
                ("created_timestamp", models.DateTimeField()),
                ("severity", models.CharField(max_length=50)),
                ("message", models.TextField()),
                ("acl", models.JSONField(db_default="{}", default=dict)),
                ("acl_flat", models.JSONField(db_default="{}", default=dict)),
                (
                    "firm_user_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="firm_user_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.firmuser",
                    ),
                ),
                (
                    "subscriber_ref",
                    models.ForeignKey(
                        blank=True,
                        db_column="subscriber_ref",
                        null=True,
                        on_delete=django.db.models.deletion.RESTRICT,
                        to="django_rdbms.subscriber",
                    ),
                ),
            ],
            options={
                "db_table": "user_messages",
            },
        ),
        migrations.AddIndex(
            model_name="firmuser",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="firm_users_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="firmuser",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="firm_users_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="firmuser",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="firm_users_acl_roles_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="firmuser",
            constraint=models.CheckConstraint(
                condition=models.Q(("_type__in", ["FirmUser", "LawyerUser"])),
                name="firm_users__type_check",
            ),
        ),
        migrations.AddConstraint(
            model_name="firmusergroup",
            constraint=models.UniqueConstraint(
                fields=("firm_user_ref", "group_ref"), name="firm_user_group_pk"
            ),
        ),
        migrations.AddConstraint(
            model_name="firmgroup",
            constraint=models.UniqueConstraint(
                fields=("firm_ref", "group_ref"), name="firm_group_pk"
            ),
        ),
        migrations.AddIndex(
            model_name="invite",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="invites_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="invite",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="invites_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="invite",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="invites_acl_roles_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="invite",
            constraint=models.CheckConstraint(
                condition=models.Q(("user_type__in", ["FirmUser", "LawyerUser"])),
                name="invites_user_type_check",
            ),
        ),
        migrations.AddConstraint(
            model_name="firmuserlabel",
            constraint=models.UniqueConstraint(
                fields=("firm_user_ref", "label_ref"), name="firm_user_label_pk"
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="events_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="events_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="events_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=models.Index(
                fields=["last_updated_timestamp"], name="last_updated_timestamp_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="calendarevent",
            index=models.Index(
                fields=["legal_matter_ref"], name="legal_matter_ref_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="legalmatterintakedata",
            constraint=models.UniqueConstraint(
                fields=("legal_matter_ref", "intake_form_ref"),
                name="legal_matter_intake_data_pk",
            ),
        ),
        migrations.AddIndex(
            model_name="note",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="notes_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="note",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="notes_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="note",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="notes_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="note",
            index=models.Index(
                fields=["created_timestamp"], name="notes_created_timestamp_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="note",
            index=models.Index(
                fields=["legal_matter_ref"], name="notes_legal_matter_ref_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentprocessoraccount",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="pma_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentprocessoraccount",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="pma_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentprocessoraccount",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="pma_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="legalmatter",
            index=models.Index(
                fields=["created_timestamp"], name="lm_created_timestamp_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="legalmatter",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="lm_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="legalmatter",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="lm_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="legalmatter",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="lm_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="docs_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="docs_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="docs_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=models.Index(
                fields=["created_timestamp"], name="docs_created_timestamp_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="document",
            index=models.Index(
                fields=["legal_matter_ref"], name="documents_legal_matter_ref_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="document",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("created_by_firm_user_ref__isnull", False),
                        ("created_by_subscriber_ref__isnull", True),
                    ),
                    models.Q(
                        ("created_by_firm_user_ref__isnull", True),
                        ("created_by_subscriber_ref__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="documents_check",
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="checkout_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="checkout_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="checkoutsession",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="checkout_acl_roles_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="calendareventparticipant",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("participant_firm_user_ref__isnull", False),
                        ("participant_subscriber_ref__isnull", True),
                    ),
                    models.Q(
                        ("participant_firm_user_ref__isnull", True),
                        ("participant_subscriber_ref__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="calendar_event_participants_check",
            ),
        ),
        migrations.AddIndex(
            model_name="subscriptiondetail",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="sub_details_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="subscriptiondetail",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="sub_details_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="subscriptiondetail",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="sub_details_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="tasks_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="tasks_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="tasks_acl_roles_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["created_timestamp"], name="tasks_created_timestamp_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["legal_matter_ref"], name="tasks_legal_matter_ref_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="task",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("assigned_to_firm_user_ref__isnull", False),
                        ("assigned_to_subscriber_ref__isnull", True),
                    ),
                    models.Q(
                        ("assigned_to_firm_user_ref__isnull", True),
                        ("assigned_to_subscriber_ref__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="tasks_check",
            ),
        ),
        migrations.AddConstraint(
            model_name="taskdocument",
            constraint=models.UniqueConstraint(
                fields=("document_ref", "task_ref"), name="task_documents_pk"
            ),
        ),
        migrations.AddIndex(
            model_name="usermessage",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_get"), name="jsonb_path_ops"
                ),
                name="messages_acl_get_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="usermessage",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__entity_list"), name="jsonb_path_ops"
                ),
                name="messages_acl_list_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="usermessage",
            index=django.contrib.postgres.indexes.GinIndex(
                django.contrib.postgres.indexes.OpClass(
                    models.F("acl_flat__role_identities"), name="jsonb_path_ops"
                ),
                name="messages_acl_roles_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="usermessage",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("firm_user_ref__isnull", False),
                        ("subscriber_ref__isnull", True),
                    ),
                    models.Q(
                        ("firm_user_ref__isnull", True),
                        ("subscriber_ref__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="user_messages_check",
            ),
        ),
    ]
